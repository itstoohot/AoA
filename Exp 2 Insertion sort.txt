#include <stdio.h>
int main()
{
    int n,i,j,key;
    int arr[100];
    printf("Enter the size of array : ");
    scanf("%d", &n);

    printf("Enter the elements in array :");
    for (i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }


    // Insertion Sort
    for (i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;

        while (arr[j] > key && j >= 0)
        {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }

    printf("\nSorted Array :");
    for (i = 0; i < n; i++)
    {
        printf("%d ", arr[i]);
    }
    return 0;
}

Time Complexity of Insertion Sort
Best case: O(n), If the list is already sorted, where n is the number of elements in the list.
Average case: O(n2), If the list is randomly ordered
Worst case: O(n2), If the list is in reverse order


Algorithm: Insertion-Sort(A)
for j = 2 to A.length
   key = A[j]
   i = j â€“ 1
   while i > 0 and A[i] > key
      A[i + 1] = A[i]
      i = i -1
   A[i + 1] = key